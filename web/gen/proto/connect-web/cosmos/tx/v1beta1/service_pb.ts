// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file cosmos/tx/v1beta1/service.proto (package cosmos.tx.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../base/query/v1beta1/pagination_pb.js";
import { Tx } from "./tx_pb.js";
import { GasInfo, Result, TxResponse } from "../../base/abci/v1beta1/abci_pb.js";
import { BlockID } from "../../../tendermint/types/types_pb.js";
import { Block } from "../../../tendermint/types/block_pb.js";

/**
 * OrderBy defines the sorting order
 *
 * @generated from enum cosmos.tx.v1beta1.OrderBy
 */
export enum OrderBy {
  /**
   * ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
   *
   * @generated from enum value: ORDER_BY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ORDER_BY_ASC defines ascending order
   *
   * @generated from enum value: ORDER_BY_ASC = 1;
   */
  ASC = 1,

  /**
   * ORDER_BY_DESC defines descending order
   *
   * @generated from enum value: ORDER_BY_DESC = 2;
   */
  DESC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(OrderBy)
proto3.util.setEnumType(OrderBy, "cosmos.tx.v1beta1.OrderBy", [
  { no: 0, name: "ORDER_BY_UNSPECIFIED" },
  { no: 1, name: "ORDER_BY_ASC" },
  { no: 2, name: "ORDER_BY_DESC" },
]);

/**
 * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.
 *
 * @generated from enum cosmos.tx.v1beta1.BroadcastMode
 */
export enum BroadcastMode {
  /**
   * zero-value for mode ordering
   *
   * @generated from enum value: BROADCAST_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
   * the tx to be committed in a block.
   *
   * @generated from enum value: BROADCAST_MODE_BLOCK = 1;
   */
  BLOCK = 1,

  /**
   * BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
   * a CheckTx execution response only.
   *
   * @generated from enum value: BROADCAST_MODE_SYNC = 2;
   */
  SYNC = 2,

  /**
   * BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
   * immediately.
   *
   * @generated from enum value: BROADCAST_MODE_ASYNC = 3;
   */
  ASYNC = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(BroadcastMode)
proto3.util.setEnumType(BroadcastMode, "cosmos.tx.v1beta1.BroadcastMode", [
  { no: 0, name: "BROADCAST_MODE_UNSPECIFIED" },
  { no: 1, name: "BROADCAST_MODE_BLOCK" },
  { no: 2, name: "BROADCAST_MODE_SYNC" },
  { no: 3, name: "BROADCAST_MODE_ASYNC" },
]);

/**
 * GetTxsEventRequest is the request type for the Service.TxsByEvents
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxsEventRequest
 */
export class GetTxsEventRequest extends Message<GetTxsEventRequest> {
  /**
   * events is the list of transaction event type.
   *
   * @generated from field: repeated string events = 1;
   */
  events: string[] = [];

  /**
   * pagination defines a pagination for the request.
   * Deprecated post v0.46.x: use page and limit instead.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2 [deprecated = true];
   * @deprecated
   */
  pagination?: PageRequest;

  /**
   * @generated from field: cosmos.tx.v1beta1.OrderBy order_by = 3;
   */
  orderBy = OrderBy.UNSPECIFIED;

  /**
   * page is the page number to query, starts at 1. If not provided, will default to first page.
   *
   * @generated from field: uint64 page = 4;
   */
  page = protoInt64.zero;

  /**
   * limit is the total number of results to be returned in the result page.
   * If left empty it will default to a value to be set by each app.
   *
   * @generated from field: uint64 limit = 5;
   */
  limit = protoInt64.zero;

  constructor(data?: PartialMessage<GetTxsEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.tx.v1beta1.GetTxsEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
    { no: 3, name: "order_by", kind: "enum", T: proto3.getEnumType(OrderBy) },
    { no: 4, name: "page", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTxsEventRequest {
    return new GetTxsEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTxsEventRequest {
    return new GetTxsEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTxsEventRequest {
    return new GetTxsEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTxsEventRequest | PlainMessage<GetTxsEventRequest> | undefined, b: GetTxsEventRequest | PlainMessage<GetTxsEventRequest> | undefined): boolean {
    return proto3.util.equals(GetTxsEventRequest, a, b);
  }
}

/**
 * GetTxsEventResponse is the response type for the Service.TxsByEvents
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxsEventResponse
 */
export class GetTxsEventResponse extends Message<GetTxsEventResponse> {
  /**
   * txs is the list of queried transactions.
   *
   * @generated from field: repeated cosmos.tx.v1beta1.Tx txs = 1;
   */
  txs: Tx[] = [];

  /**
   * tx_responses is the list of queried TxResponses.
   *
   * @generated from field: repeated cosmos.base.abci.v1beta1.TxResponse tx_responses = 2;
   */
  txResponses: TxResponse[] = [];

  /**
   * pagination defines a pagination for the response.
   * Deprecated post v0.46.x: use total instead.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 3 [deprecated = true];
   * @deprecated
   */
  pagination?: PageResponse;

  /**
   * total is total number of results available
   *
   * @generated from field: uint64 total = 4;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<GetTxsEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.tx.v1beta1.GetTxsEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "txs", kind: "message", T: Tx, repeated: true },
    { no: 2, name: "tx_responses", kind: "message", T: TxResponse, repeated: true },
    { no: 3, name: "pagination", kind: "message", T: PageResponse },
    { no: 4, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTxsEventResponse {
    return new GetTxsEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTxsEventResponse {
    return new GetTxsEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTxsEventResponse {
    return new GetTxsEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTxsEventResponse | PlainMessage<GetTxsEventResponse> | undefined, b: GetTxsEventResponse | PlainMessage<GetTxsEventResponse> | undefined): boolean {
    return proto3.util.equals(GetTxsEventResponse, a, b);
  }
}

/**
 * BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.BroadcastTxRequest
 */
export class BroadcastTxRequest extends Message<BroadcastTxRequest> {
  /**
   * tx_bytes is the raw transaction.
   *
   * @generated from field: bytes tx_bytes = 1;
   */
  txBytes = new Uint8Array(0);

  /**
   * @generated from field: cosmos.tx.v1beta1.BroadcastMode mode = 2;
   */
  mode = BroadcastMode.UNSPECIFIED;

  constructor(data?: PartialMessage<BroadcastTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.tx.v1beta1.BroadcastTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "mode", kind: "enum", T: proto3.getEnumType(BroadcastMode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BroadcastTxRequest {
    return new BroadcastTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BroadcastTxRequest {
    return new BroadcastTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BroadcastTxRequest {
    return new BroadcastTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BroadcastTxRequest | PlainMessage<BroadcastTxRequest> | undefined, b: BroadcastTxRequest | PlainMessage<BroadcastTxRequest> | undefined): boolean {
    return proto3.util.equals(BroadcastTxRequest, a, b);
  }
}

/**
 * BroadcastTxResponse is the response type for the
 * Service.BroadcastTx method.
 *
 * @generated from message cosmos.tx.v1beta1.BroadcastTxResponse
 */
export class BroadcastTxResponse extends Message<BroadcastTxResponse> {
  /**
   * tx_response is the queried TxResponses.
   *
   * @generated from field: cosmos.base.abci.v1beta1.TxResponse tx_response = 1;
   */
  txResponse?: TxResponse;

  constructor(data?: PartialMessage<BroadcastTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.tx.v1beta1.BroadcastTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_response", kind: "message", T: TxResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BroadcastTxResponse {
    return new BroadcastTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BroadcastTxResponse {
    return new BroadcastTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BroadcastTxResponse {
    return new BroadcastTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BroadcastTxResponse | PlainMessage<BroadcastTxResponse> | undefined, b: BroadcastTxResponse | PlainMessage<BroadcastTxResponse> | undefined): boolean {
    return proto3.util.equals(BroadcastTxResponse, a, b);
  }
}

/**
 * SimulateRequest is the request type for the Service.Simulate
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.SimulateRequest
 */
export class SimulateRequest extends Message<SimulateRequest> {
  /**
   * tx is the transaction to simulate.
   * Deprecated. Send raw tx bytes instead.
   *
   * @generated from field: cosmos.tx.v1beta1.Tx tx = 1 [deprecated = true];
   * @deprecated
   */
  tx?: Tx;

  /**
   * tx_bytes is the raw transaction.
   *
   * Since: cosmos-sdk 0.43
   *
   * @generated from field: bytes tx_bytes = 2;
   */
  txBytes = new Uint8Array(0);

  constructor(data?: PartialMessage<SimulateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.tx.v1beta1.SimulateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "message", T: Tx },
    { no: 2, name: "tx_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimulateRequest {
    return new SimulateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimulateRequest {
    return new SimulateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimulateRequest {
    return new SimulateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SimulateRequest | PlainMessage<SimulateRequest> | undefined, b: SimulateRequest | PlainMessage<SimulateRequest> | undefined): boolean {
    return proto3.util.equals(SimulateRequest, a, b);
  }
}

/**
 * SimulateResponse is the response type for the
 * Service.SimulateRPC method.
 *
 * @generated from message cosmos.tx.v1beta1.SimulateResponse
 */
export class SimulateResponse extends Message<SimulateResponse> {
  /**
   * gas_info is the information about gas used in the simulation.
   *
   * @generated from field: cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
   */
  gasInfo?: GasInfo;

  /**
   * result is the result of the simulation.
   *
   * @generated from field: cosmos.base.abci.v1beta1.Result result = 2;
   */
  result?: Result;

  constructor(data?: PartialMessage<SimulateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.tx.v1beta1.SimulateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gas_info", kind: "message", T: GasInfo },
    { no: 2, name: "result", kind: "message", T: Result },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimulateResponse {
    return new SimulateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimulateResponse {
    return new SimulateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimulateResponse {
    return new SimulateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SimulateResponse | PlainMessage<SimulateResponse> | undefined, b: SimulateResponse | PlainMessage<SimulateResponse> | undefined): boolean {
    return proto3.util.equals(SimulateResponse, a, b);
  }
}

/**
 * GetTxRequest is the request type for the Service.GetTx
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxRequest
 */
export class GetTxRequest extends Message<GetTxRequest> {
  /**
   * hash is the tx hash to query, encoded as a hex string.
   *
   * @generated from field: string hash = 1;
   */
  hash = "";

  constructor(data?: PartialMessage<GetTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.tx.v1beta1.GetTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTxRequest {
    return new GetTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTxRequest {
    return new GetTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTxRequest {
    return new GetTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTxRequest | PlainMessage<GetTxRequest> | undefined, b: GetTxRequest | PlainMessage<GetTxRequest> | undefined): boolean {
    return proto3.util.equals(GetTxRequest, a, b);
  }
}

/**
 * GetTxResponse is the response type for the Service.GetTx method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxResponse
 */
export class GetTxResponse extends Message<GetTxResponse> {
  /**
   * tx is the queried transaction.
   *
   * @generated from field: cosmos.tx.v1beta1.Tx tx = 1;
   */
  tx?: Tx;

  /**
   * tx_response is the queried TxResponses.
   *
   * @generated from field: cosmos.base.abci.v1beta1.TxResponse tx_response = 2;
   */
  txResponse?: TxResponse;

  constructor(data?: PartialMessage<GetTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.tx.v1beta1.GetTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "message", T: Tx },
    { no: 2, name: "tx_response", kind: "message", T: TxResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTxResponse {
    return new GetTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTxResponse {
    return new GetTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTxResponse {
    return new GetTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTxResponse | PlainMessage<GetTxResponse> | undefined, b: GetTxResponse | PlainMessage<GetTxResponse> | undefined): boolean {
    return proto3.util.equals(GetTxResponse, a, b);
  }
}

/**
 * GetBlockWithTxsRequest is the request type for the Service.GetBlockWithTxs
 * RPC method.
 *
 * Since: cosmos-sdk 0.45.2
 *
 * @generated from message cosmos.tx.v1beta1.GetBlockWithTxsRequest
 */
export class GetBlockWithTxsRequest extends Message<GetBlockWithTxsRequest> {
  /**
   * height is the height of the block to query.
   *
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * pagination defines a pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<GetBlockWithTxsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.tx.v1beta1.GetBlockWithTxsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlockWithTxsRequest {
    return new GetBlockWithTxsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlockWithTxsRequest {
    return new GetBlockWithTxsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlockWithTxsRequest {
    return new GetBlockWithTxsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlockWithTxsRequest | PlainMessage<GetBlockWithTxsRequest> | undefined, b: GetBlockWithTxsRequest | PlainMessage<GetBlockWithTxsRequest> | undefined): boolean {
    return proto3.util.equals(GetBlockWithTxsRequest, a, b);
  }
}

/**
 * GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs method.
 *
 * Since: cosmos-sdk 0.45.2
 *
 * @generated from message cosmos.tx.v1beta1.GetBlockWithTxsResponse
 */
export class GetBlockWithTxsResponse extends Message<GetBlockWithTxsResponse> {
  /**
   * txs are the transactions in the block.
   *
   * @generated from field: repeated cosmos.tx.v1beta1.Tx txs = 1;
   */
  txs: Tx[] = [];

  /**
   * @generated from field: tendermint.types.BlockID block_id = 2;
   */
  blockId?: BlockID;

  /**
   * @generated from field: tendermint.types.Block block = 3;
   */
  block?: Block;

  /**
   * pagination defines a pagination for the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 4;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<GetBlockWithTxsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.tx.v1beta1.GetBlockWithTxsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "txs", kind: "message", T: Tx, repeated: true },
    { no: 2, name: "block_id", kind: "message", T: BlockID },
    { no: 3, name: "block", kind: "message", T: Block },
    { no: 4, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlockWithTxsResponse {
    return new GetBlockWithTxsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlockWithTxsResponse {
    return new GetBlockWithTxsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlockWithTxsResponse {
    return new GetBlockWithTxsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlockWithTxsResponse | PlainMessage<GetBlockWithTxsResponse> | undefined, b: GetBlockWithTxsResponse | PlainMessage<GetBlockWithTxsResponse> | undefined): boolean {
    return proto3.util.equals(GetBlockWithTxsResponse, a, b);
  }
}

