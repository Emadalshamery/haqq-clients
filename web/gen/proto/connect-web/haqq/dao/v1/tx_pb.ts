// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file haqq/dao/v1/tx.proto (package haqq.dao.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgFund allows an account to directly fund the dao.
 *
 * @generated from message haqq.dao.v1.MsgFund
 */
export class MsgFund extends Message<MsgFund> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[] = [];

  /**
   * @generated from field: string depositor = 2;
   */
  depositor = "";

  constructor(data?: PartialMessage<MsgFund>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.dao.v1.MsgFund";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgFund {
    return new MsgFund().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgFund {
    return new MsgFund().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgFund {
    return new MsgFund().fromJsonString(jsonString, options);
  }

  static equals(a: MsgFund | PlainMessage<MsgFund> | undefined, b: MsgFund | PlainMessage<MsgFund> | undefined): boolean {
    return proto3.util.equals(MsgFund, a, b);
  }
}

/**
 * MsgFundResponse defines the Msg/Fund response type.
 *
 * @generated from message haqq.dao.v1.MsgFundResponse
 */
export class MsgFundResponse extends Message<MsgFundResponse> {
  constructor(data?: PartialMessage<MsgFundResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.dao.v1.MsgFundResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgFundResponse {
    return new MsgFundResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgFundResponse {
    return new MsgFundResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgFundResponse {
    return new MsgFundResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgFundResponse | PlainMessage<MsgFundResponse> | undefined, b: MsgFundResponse | PlainMessage<MsgFundResponse> | undefined): boolean {
    return proto3.util.equals(MsgFundResponse, a, b);
  }
}

