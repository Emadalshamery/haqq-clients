// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file haqq/coinomics/v1/genesis.proto (package haqq.coinomics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * GenesisState defines the inflation module's genesis state.
 *
 * @generated from message haqq.coinomics.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the paramaters of the module.
   *
   * @generated from field: haqq.coinomics.v1.Params params = 1;
   */
  params?: Params;

  /**
   * current inflation rate
   *
   * @generated from field: string inflation = 2;
   */
  inflation = "";

  /**
   * current era number
   *
   * @generated from field: uint64 era = 3;
   */
  era = protoInt64.zero;

  /**
   * era started block number
   *
   * @generated from field: uint64 era_started_at_block = 4;
   */
  eraStartedAtBlock = protoInt64.zero;

  /**
   * target mint for current era
   *
   * @generated from field: cosmos.base.v1beta1.Coin era_target_mint = 5;
   */
  eraTargetMint?: Coin;

  /**
   * closing supply for current era
   *
   * @generated from field: cosmos.base.v1beta1.Coin era_closing_supply = 6;
   */
  eraClosingSupply?: Coin;

  /**
   * max supply
   *
   * @generated from field: cosmos.base.v1beta1.Coin max_supply = 7;
   */
  maxSupply?: Coin;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "inflation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "era", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "era_started_at_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "era_target_mint", kind: "message", T: Coin },
    { no: 6, name: "era_closing_supply", kind: "message", T: Coin },
    { no: 7, name: "max_supply", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params holds parameters for the coinomics module.
 *
 * @generated from message haqq.coinomics.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * type of coin to mint
   *
   * @generated from field: string mint_denom = 1;
   */
  mintDenom = "";

  /**
   * number of blocks per era
   *
   * @generated from field: uint64 blocks_per_era = 2;
   */
  blocksPerEra = protoInt64.zero;

  /**
   * parameter to enable coinmoics
   *
   * @generated from field: bool enable_coinomics = 3;
   */
  enableCoinomics = false;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mint_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "blocks_per_era", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "enable_coinomics", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

