// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file haqq/coinomics/v1/query.proto (package haqq.coinomics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./genesis_pb.js";

/**
 * @generated from message haqq.coinomics.v1.QueryEraRequest
 */
export class QueryEraRequest extends Message<QueryEraRequest> {
  constructor(data?: PartialMessage<QueryEraRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.QueryEraRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEraRequest {
    return new QueryEraRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEraRequest {
    return new QueryEraRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEraRequest {
    return new QueryEraRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEraRequest | PlainMessage<QueryEraRequest> | undefined, b: QueryEraRequest | PlainMessage<QueryEraRequest> | undefined): boolean {
    return proto3.util.equals(QueryEraRequest, a, b);
  }
}

/**
 * @generated from message haqq.coinomics.v1.QueryEraResponse
 */
export class QueryEraResponse extends Message<QueryEraResponse> {
  /**
   * @generated from field: uint64 era = 1;
   */
  era = protoInt64.zero;

  constructor(data?: PartialMessage<QueryEraResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.QueryEraResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "era", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEraResponse {
    return new QueryEraResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEraResponse {
    return new QueryEraResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEraResponse {
    return new QueryEraResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEraResponse | PlainMessage<QueryEraResponse> | undefined, b: QueryEraResponse | PlainMessage<QueryEraResponse> | undefined): boolean {
    return proto3.util.equals(QueryEraResponse, a, b);
  }
}

/**
 * @generated from message haqq.coinomics.v1.QueryEraClosingSupplyRequest
 */
export class QueryEraClosingSupplyRequest extends Message<QueryEraClosingSupplyRequest> {
  constructor(data?: PartialMessage<QueryEraClosingSupplyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.QueryEraClosingSupplyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEraClosingSupplyRequest {
    return new QueryEraClosingSupplyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEraClosingSupplyRequest {
    return new QueryEraClosingSupplyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEraClosingSupplyRequest {
    return new QueryEraClosingSupplyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEraClosingSupplyRequest | PlainMessage<QueryEraClosingSupplyRequest> | undefined, b: QueryEraClosingSupplyRequest | PlainMessage<QueryEraClosingSupplyRequest> | undefined): boolean {
    return proto3.util.equals(QueryEraClosingSupplyRequest, a, b);
  }
}

/**
 * @generated from message haqq.coinomics.v1.QueryEraClosingSupplyResponse
 */
export class QueryEraClosingSupplyResponse extends Message<QueryEraClosingSupplyResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin era_closing_supply = 1;
   */
  eraClosingSupply?: Coin;

  constructor(data?: PartialMessage<QueryEraClosingSupplyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.QueryEraClosingSupplyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "era_closing_supply", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEraClosingSupplyResponse {
    return new QueryEraClosingSupplyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEraClosingSupplyResponse {
    return new QueryEraClosingSupplyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEraClosingSupplyResponse {
    return new QueryEraClosingSupplyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEraClosingSupplyResponse | PlainMessage<QueryEraClosingSupplyResponse> | undefined, b: QueryEraClosingSupplyResponse | PlainMessage<QueryEraClosingSupplyResponse> | undefined): boolean {
    return proto3.util.equals(QueryEraClosingSupplyResponse, a, b);
  }
}

/**
 * @generated from message haqq.coinomics.v1.QueryMaxSupplyRequest
 */
export class QueryMaxSupplyRequest extends Message<QueryMaxSupplyRequest> {
  constructor(data?: PartialMessage<QueryMaxSupplyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.QueryMaxSupplyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMaxSupplyRequest {
    return new QueryMaxSupplyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMaxSupplyRequest {
    return new QueryMaxSupplyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMaxSupplyRequest {
    return new QueryMaxSupplyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMaxSupplyRequest | PlainMessage<QueryMaxSupplyRequest> | undefined, b: QueryMaxSupplyRequest | PlainMessage<QueryMaxSupplyRequest> | undefined): boolean {
    return proto3.util.equals(QueryMaxSupplyRequest, a, b);
  }
}

/**
 * @generated from message haqq.coinomics.v1.QueryMaxSupplyResponse
 */
export class QueryMaxSupplyResponse extends Message<QueryMaxSupplyResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin max_supply = 1;
   */
  maxSupply?: Coin;

  constructor(data?: PartialMessage<QueryMaxSupplyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.QueryMaxSupplyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_supply", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMaxSupplyResponse {
    return new QueryMaxSupplyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMaxSupplyResponse {
    return new QueryMaxSupplyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMaxSupplyResponse {
    return new QueryMaxSupplyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMaxSupplyResponse | PlainMessage<QueryMaxSupplyResponse> | undefined, b: QueryMaxSupplyResponse | PlainMessage<QueryMaxSupplyResponse> | undefined): boolean {
    return proto3.util.equals(QueryMaxSupplyResponse, a, b);
  }
}

/**
 * @generated from message haqq.coinomics.v1.QueryInflationRateRequest
 */
export class QueryInflationRateRequest extends Message<QueryInflationRateRequest> {
  constructor(data?: PartialMessage<QueryInflationRateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.QueryInflationRateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInflationRateRequest {
    return new QueryInflationRateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInflationRateRequest {
    return new QueryInflationRateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInflationRateRequest {
    return new QueryInflationRateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInflationRateRequest | PlainMessage<QueryInflationRateRequest> | undefined, b: QueryInflationRateRequest | PlainMessage<QueryInflationRateRequest> | undefined): boolean {
    return proto3.util.equals(QueryInflationRateRequest, a, b);
  }
}

/**
 * @generated from message haqq.coinomics.v1.QueryInflationRateResponse
 */
export class QueryInflationRateResponse extends Message<QueryInflationRateResponse> {
  /**
   * rate by which the total supply increases within one era
   *
   * @generated from field: string inflation_rate = 1;
   */
  inflationRate = "";

  constructor(data?: PartialMessage<QueryInflationRateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.QueryInflationRateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inflation_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInflationRateResponse {
    return new QueryInflationRateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInflationRateResponse {
    return new QueryInflationRateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInflationRateResponse {
    return new QueryInflationRateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInflationRateResponse | PlainMessage<QueryInflationRateResponse> | undefined, b: QueryInflationRateResponse | PlainMessage<QueryInflationRateResponse> | undefined): boolean {
    return proto3.util.equals(QueryInflationRateResponse, a, b);
  }
}

/**
 * @generated from message haqq.coinomics.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * @generated from message haqq.coinomics.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: haqq.coinomics.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "haqq.coinomics.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

